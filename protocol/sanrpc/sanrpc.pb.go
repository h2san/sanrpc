// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sanrpc.proto

package sanrpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SanrpcMagic int32

const (
	SanrpcMagic_SANRPC_DEFAULT_MAGIC_VALUE SanrpcMagic = 0
	SanrpcMagic_SANRPC_MAGIC_VALUE         SanrpcMagic = 5201314
)

var SanrpcMagic_name = map[int32]string{
	0:       "SANRPC_DEFAULT_MAGIC_VALUE",
	5201314: "SANRPC_MAGIC_VALUE",
}

var SanrpcMagic_value = map[string]int32{
	"SANRPC_DEFAULT_MAGIC_VALUE": 0,
	"SANRPC_MAGIC_VALUE":         5201314,
}

func (x SanrpcMagic) String() string {
	return proto.EnumName(SanrpcMagic_name, int32(x))
}

func (SanrpcMagic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_be86558a1b70b3c0, []int{0}
}

type SanrpcContentEncodeType int32

const (
	SanrpcContentEncodeType_SANRPC_NONE_ENCODE SanrpcContentEncodeType = 0
	SanrpcContentEncodeType_SANRPC_PB_ENCODE   SanrpcContentEncodeType = 1
	SanrpcContentEncodeType_SANRPC_JSON_ENCODE SanrpcContentEncodeType = 2
)

var SanrpcContentEncodeType_name = map[int32]string{
	0: "SANRPC_NONE_ENCODE",
	1: "SANRPC_PB_ENCODE",
	2: "SANRPC_JSON_ENCODE",
}

var SanrpcContentEncodeType_value = map[string]int32{
	"SANRPC_NONE_ENCODE": 0,
	"SANRPC_PB_ENCODE":   1,
	"SANRPC_JSON_ENCODE": 2,
}

func (x SanrpcContentEncodeType) String() string {
	return proto.EnumName(SanrpcContentEncodeType_name, int32(x))
}

func (SanrpcContentEncodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_be86558a1b70b3c0, []int{1}
}

type SanrpcCompressType int32

const (
	SanrpcCompressType_SANRPC_NONE_COMPRESS SanrpcCompressType = 0
	SanrpcCompressType_SANRPC_GZIP_COMPRESS SanrpcCompressType = 1
)

var SanrpcCompressType_name = map[int32]string{
	0: "SANRPC_NONE_COMPRESS",
	1: "SANRPC_GZIP_COMPRESS",
}

var SanrpcCompressType_value = map[string]int32{
	"SANRPC_NONE_COMPRESS": 0,
	"SANRPC_GZIP_COMPRESS": 1,
}

func (x SanrpcCompressType) String() string {
	return proto.EnumName(SanrpcCompressType_name, int32(x))
}

func (SanrpcCompressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_be86558a1b70b3c0, []int{2}
}

type SanrpcMsgType int32

const (
	SanrpcMsgType_SANRPC_NONE_MSG     SanrpcMsgType = 0
	SanrpcMsgType_SANRPC_REQUEST_MSG  SanrpcMsgType = 1
	SanrpcMsgType_SANRPC_RESPONSE_MSG SanrpcMsgType = 2
)

var SanrpcMsgType_name = map[int32]string{
	0: "SANRPC_NONE_MSG",
	1: "SANRPC_REQUEST_MSG",
	2: "SANRPC_RESPONSE_MSG",
}

var SanrpcMsgType_value = map[string]int32{
	"SANRPC_NONE_MSG":     0,
	"SANRPC_REQUEST_MSG":  1,
	"SANRPC_RESPONSE_MSG": 2,
}

func (x SanrpcMsgType) String() string {
	return proto.EnumName(SanrpcMsgType_name, int32(x))
}

func (SanrpcMsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_be86558a1b70b3c0, []int{3}
}

type MsgHeader struct {
	Version              uint32                  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	CallType             uint32                  `protobuf:"varint,2,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	Seq                  uint64                  `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	Timeout              uint32                  `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ServiceName          string                  `protobuf:"bytes,5,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	MethodName           string                  `protobuf:"bytes,6,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	EncodeType           SanrpcContentEncodeType `protobuf:"varint,7,opt,name=encode_type,json=encodeType,proto3,enum=sanrpc.SanrpcContentEncodeType" json:"encode_type,omitempty"`
	CompressType         SanrpcCompressType      `protobuf:"varint,8,opt,name=compress_type,json=compressType,proto3,enum=sanrpc.SanrpcCompressType" json:"compress_type,omitempty"`
	MetaData             []byte                  `protobuf:"bytes,9,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *MsgHeader) Reset()         { *m = MsgHeader{} }
func (m *MsgHeader) String() string { return proto.CompactTextString(m) }
func (*MsgHeader) ProtoMessage()    {}
func (*MsgHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_be86558a1b70b3c0, []int{0}
}

func (m *MsgHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgHeader.Unmarshal(m, b)
}
func (m *MsgHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgHeader.Marshal(b, m, deterministic)
}
func (m *MsgHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHeader.Merge(m, src)
}
func (m *MsgHeader) XXX_Size() int {
	return xxx_messageInfo_MsgHeader.Size(m)
}
func (m *MsgHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHeader.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHeader proto.InternalMessageInfo

func (m *MsgHeader) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MsgHeader) GetCallType() uint32 {
	if m != nil {
		return m.CallType
	}
	return 0
}

func (m *MsgHeader) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *MsgHeader) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *MsgHeader) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *MsgHeader) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *MsgHeader) GetEncodeType() SanrpcContentEncodeType {
	if m != nil {
		return m.EncodeType
	}
	return SanrpcContentEncodeType_SANRPC_NONE_ENCODE
}

func (m *MsgHeader) GetCompressType() SanrpcCompressType {
	if m != nil {
		return m.CompressType
	}
	return SanrpcCompressType_SANRPC_NONE_COMPRESS
}

func (m *MsgHeader) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

type MessageProtocol struct {
	Header               *MsgHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode              int32      `protobuf:"varint,2,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`
	RetMsg               string     `protobuf:"bytes,3,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`
	Data                 []byte     `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MessageProtocol) Reset()         { *m = MessageProtocol{} }
func (m *MessageProtocol) String() string { return proto.CompactTextString(m) }
func (*MessageProtocol) ProtoMessage()    {}
func (*MessageProtocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_be86558a1b70b3c0, []int{1}
}

func (m *MessageProtocol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageProtocol.Unmarshal(m, b)
}
func (m *MessageProtocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageProtocol.Marshal(b, m, deterministic)
}
func (m *MessageProtocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageProtocol.Merge(m, src)
}
func (m *MessageProtocol) XXX_Size() int {
	return xxx_messageInfo_MessageProtocol.Size(m)
}
func (m *MessageProtocol) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageProtocol.DiscardUnknown(m)
}

var xxx_messageInfo_MessageProtocol proto.InternalMessageInfo

func (m *MessageProtocol) GetHeader() *MsgHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MessageProtocol) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *MessageProtocol) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *MessageProtocol) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("sanrpc.SanrpcMagic", SanrpcMagic_name, SanrpcMagic_value)
	proto.RegisterEnum("sanrpc.SanrpcContentEncodeType", SanrpcContentEncodeType_name, SanrpcContentEncodeType_value)
	proto.RegisterEnum("sanrpc.SanrpcCompressType", SanrpcCompressType_name, SanrpcCompressType_value)
	proto.RegisterEnum("sanrpc.SanrpcMsgType", SanrpcMsgType_name, SanrpcMsgType_value)
	proto.RegisterType((*MsgHeader)(nil), "sanrpc.MsgHeader")
	proto.RegisterType((*MessageProtocol)(nil), "sanrpc.MessageProtocol")
}

func init() { proto.RegisterFile("sanrpc.proto", fileDescriptor_be86558a1b70b3c0) }

var fileDescriptor_be86558a1b70b3c0 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xd3, 0x34, 0x3f, 0x37, 0xc9, 0xd7, 0x7c, 0xd3, 0x8a, 0xb8, 0x45, 0xa2, 0xa1, 0xab,
	0x90, 0x45, 0x17, 0xe5, 0x01, 0x20, 0x38, 0x26, 0x29, 0xaa, 0x1d, 0x33, 0x4e, 0x58, 0xb0, 0x19,
	0x0d, 0xce, 0x95, 0x1b, 0x29, 0xf6, 0x18, 0xcf, 0x50, 0xa9, 0x7b, 0x9e, 0x84, 0xd7, 0x40, 0xbc,
	0x04, 0x4f, 0x84, 0x66, 0xec, 0x04, 0x0b, 0xc4, 0xca, 0xf7, 0x9e, 0x7b, 0xee, 0xf1, 0xb9, 0x47,
	0x1a, 0xe8, 0x49, 0x9e, 0xe6, 0x59, 0x74, 0x9d, 0xe5, 0x42, 0x09, 0xd2, 0x2c, 0xba, 0xab, 0x9f,
	0x75, 0xe8, 0x78, 0x32, 0x5e, 0x20, 0xdf, 0x60, 0x4e, 0x6c, 0x68, 0x3d, 0x60, 0x2e, 0xb7, 0x22,
	0xb5, 0xad, 0x91, 0x35, 0xee, 0xd3, 0x7d, 0x4b, 0x9e, 0x42, 0x27, 0xe2, 0xbb, 0x1d, 0x53, 0x8f,
	0x19, 0xda, 0x75, 0x33, 0x6b, 0x6b, 0x60, 0xf5, 0x98, 0x21, 0x19, 0xc0, 0x91, 0xc4, 0xcf, 0xf6,
	0xd1, 0xc8, 0x1a, 0x37, 0xa8, 0x2e, 0xb5, 0x90, 0xda, 0x26, 0x28, 0xbe, 0x28, 0xbb, 0x51, 0x08,
	0x95, 0x2d, 0x79, 0x0e, 0x3d, 0x89, 0xf9, 0xc3, 0x36, 0x42, 0x96, 0xf2, 0x04, 0xed, 0xe3, 0x91,
	0x35, 0xee, 0xd0, 0x6e, 0x89, 0xf9, 0x3c, 0x41, 0x72, 0x09, 0xdd, 0x04, 0xd5, 0xbd, 0xd8, 0x14,
	0x8c, 0xa6, 0x61, 0x40, 0x01, 0x19, 0xc2, 0x6b, 0xe8, 0x62, 0x1a, 0x89, 0x0d, 0x16, 0x76, 0x5a,
	0x23, 0x6b, 0xfc, 0xdf, 0xcd, 0xe5, 0x75, 0x79, 0x60, 0x68, 0x3e, 0x8e, 0x48, 0x15, 0xa6, 0xca,
	0x35, 0x3c, 0xed, 0x92, 0x02, 0x1e, 0x6a, 0xf2, 0x0a, 0xfa, 0x91, 0x48, 0xb2, 0x1c, 0xa5, 0x2c,
	0x34, 0xda, 0x46, 0xe3, 0xe2, 0x4f, 0x8d, 0x82, 0x62, 0xd6, 0x7b, 0x51, 0xa5, 0xd3, 0x79, 0x24,
	0xa8, 0x38, 0xdb, 0x70, 0xc5, 0xed, 0xce, 0xc8, 0x1a, 0xf7, 0x68, 0x5b, 0x03, 0x33, 0xae, 0xf8,
	0xd5, 0x57, 0x0b, 0x4e, 0x3c, 0x94, 0x92, 0xc7, 0x18, 0xe8, 0xb4, 0x23, 0xb1, 0x23, 0x2f, 0xa0,
	0x79, 0x6f, 0x42, 0x36, 0xc9, 0x76, 0x6f, 0xfe, 0xdf, 0xff, 0xea, 0x90, 0x3e, 0x2d, 0x09, 0xe4,
	0x1c, 0xda, 0x39, 0x2a, 0xa6, 0xcd, 0x9a, 0xa8, 0x8f, 0x69, 0x2b, 0x47, 0xe5, 0x88, 0x0d, 0x92,
	0x21, 0xe8, 0x92, 0x25, 0x32, 0x36, 0x69, 0x77, 0x68, 0x33, 0x47, 0xe5, 0xc9, 0x98, 0x10, 0x68,
	0x18, 0x2b, 0x0d, 0x63, 0xc5, 0xd4, 0x93, 0x05, 0x74, 0x8b, 0x3b, 0x3c, 0x1e, 0x6f, 0x23, 0xf2,
	0x0c, 0x2e, 0xc2, 0xa9, 0x4f, 0x03, 0x87, 0xcd, 0xdc, 0xb7, 0xd3, 0xf5, 0xdd, 0x8a, 0x79, 0xd3,
	0xf9, 0xad, 0xc3, 0x3e, 0x4c, 0xef, 0xd6, 0xee, 0xa0, 0x46, 0xce, 0x81, 0x94, 0xf3, 0x2a, 0xfe,
	0xed, 0xfb, 0x8f, 0xfa, 0x84, 0xc1, 0xf0, 0x1f, 0xa9, 0x92, 0x27, 0x87, 0x2d, 0x7f, 0xe9, 0xbb,
	0xcc, 0xf5, 0x9d, 0xe5, 0x4c, 0xab, 0x9d, 0xc1, 0xa0, 0xc4, 0x83, 0x37, 0x7b, 0xd4, 0xaa, 0xb0,
	0xdf, 0x85, 0x4b, 0x7f, 0x8f, 0xd7, 0x27, 0x0b, 0x20, 0x7f, 0x47, 0x4e, 0x6c, 0x38, 0xab, 0x6a,
	0x3b, 0x4b, 0x2f, 0xa0, 0x6e, 0x18, 0x0e, 0x6a, 0x95, 0xc9, 0xfc, 0xe3, 0x6d, 0xf0, 0x7b, 0x62,
	0x4d, 0xd6, 0xd0, 0x2f, 0x8f, 0x96, 0xb1, 0x11, 0x39, 0x85, 0x93, 0xaa, 0x88, 0x17, 0xce, 0x07,
	0xb5, 0x8a, 0x0f, 0xea, 0xbe, 0x5f, 0xbb, 0xe1, 0xca, 0xe0, 0x16, 0x19, 0xc2, 0xe9, 0x01, 0x0f,
	0x83, 0xa5, 0x1f, 0x16, 0x0b, 0xf5, 0x4f, 0x4d, 0xf3, 0x6c, 0x5e, 0xfe, 0x0a, 0x00, 0x00, 0xff,
	0xff, 0x00, 0x36, 0xad, 0xe5, 0x46, 0x03, 0x00, 0x00,
}
